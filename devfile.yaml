apiVersion: 1.0.0
metadata:
  name: dotnet
projects:
  - name: dotnet-app
    source:
      location: 'git@github.com:ProofOfConceptDeveloper/PFR.git'
      startPoint: pittar
      type: git
components:
  - id: redhat-developer/che-omnisharp-plugin/latest
    type: chePlugin
    alias: omnisharp
  - id: redhat-developer/netcoredbg-theia-plugin/latest
    type: chePlugin
    alias: netcoredbg
  - mountSources: true
    endpoints:
      - name: app-endpoint
        port: 5000
    memoryLimit: 512Mi
    type: dockerimage
    volumes:
      - name: nuget
        containerPath: /home/jboss/.nuget
    alias: dotnet
    image: 'registry.redhat.io/codeready-workspaces/stacks-dotnet-rhel8:2.8'
  - type: kubernetes
    reference: codeready/crw-kafka.yaml
    alias: kafka
#   - alias: postgresql
#     endpoints:
#       - name: postgresql
#         port: 5432
#     memoryLimit: 256Mi
#     type: dockerimage
#     image: 'registry.redhat.io/rhel8/postgresql-10:latest'
#     env:
#       - value: admin
#         name: POSTGRESQL_USER
#       - value: password
#         name: POSTGRESQL_PASSWORD
#       - value: appdb
#         name: POSTGRESQL_DATABASE
#   - alias: pgadmin4
#     endpoints:
#       - name: pgadmin4
#         port: 5050
#     memoryLimit: 256Mi
#     type: dockerimage
#     image: 'registry.connect.redhat.com/crunchydata/crunchy-pgadmin4:latest'
#     env:
#       - value: admin@example.com
#         name: PGADMIN_SETUP_EMAIL
#       - value: password
#         name: PGADMIN_SETUP_PASSWORD
#   - alias: mongodb
#     endpoints:
#       - name: mongodb
#         port: 27017
#     memoryLimit: 512Mi
#     type: dockerimage
#     volumes:
#       - name: mongo-1
#         containerPath: /data/configdb
#       - name: mongo-2
#         containerPath: /data/db
#     image: 'docker.io/mongo:4.0.25'
#     env:
#       - value: root
#         name: MONGO_INITDB_ROOT_USERNAME
#       - value: password
#         name: MONGO_INITDB_ROOT_PASSWORD
#   - alias: mongo-express
#     endpoints:
#       - name: mongo-express
#         port: 8081
#     memoryLimit: 512Mi
#     type: dockerimage
#     image: 'docker.io/mongo-express:0.54'
#     env:
#       - name: ME_CONFIG_MONGODB_ADMINUSERNAME
#         value: root
#       - name: ME_CONFIG_MONGODB_ADMINPASSWORD
#         value: password
#       - name: ME_CONFIG_MONGODB_SERVER
#         value: localhost
commands:
  - name: Update dependencies
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: dotnet restore
        component: dotnet
  - name: Build
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: dotnet build
        component: dotnet
  - name: Run
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: dotnet run
        component: dotnet
  - name: Share this workspace
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI'
        type: exec
        command: |
          read -p "ENTER your OpenShift username: " OCP_USERNAME
          read -p "ENTER your OpenShift password: " -s OCP_PASSWORD
          echo
          # Login to OpenShift with the provided credentials, and grab the token
          oc login --insecure-skip-tls-verify=true -u $OCP_USERNAME -p $OCP_PASSWORD $KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT
          OCP_TOKEN=$(oc whoami -t)
          echo
          # Read username
          read -p "ENTER the username of the person with whom you want to share this workspace: " OTHER_CRW_USER
          echo
          KEYCLOAK_URL=http://keycloak.openshift-workspaces.svc:8080
          # Download jq to tmp folder
          curl -L -s https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -o /tmp/jq
          chmod +x /tmp/jq
          # Swap OCP Token for CRW Token
          CRW_TOKEN=$(curl -X POST -s -d "client_id=codeready-public" --data-urlencode "grant_type=urn:ietf:params:oauth:grant-type:token-exchange" -d "subject_token=${OCP_TOKEN}" -d "subject_issuer=openshift-v4" --data-urlencode "subject_token_type=urn:ietf:params:oauth:token-type:access_token" ${KEYCLOAK_URL}/auth/realms/codeready/protocol/openid-connect/token | /tmp/jq -r .access_token)
          # Get target user's GUID from their username
          CHE_USER_ID=$(curl -s -H "Authorization: Bearer ${CRW_TOKEN}" "${CHE_API}/user/find?name=${OTHER_CRW_USER}" | /tmp/jq -r .id)
          # Remove jq
          rm -f /tmp/jq
          # Grant read, use, and run permissions for this workspace for the indicated user
          curl -X POST --header 'Content-Type: application/json' -H "Authorization: Bearer ${CRW_TOKEN}" -H 'Accept: text/html' -d '{
            "actions": [
              "read",
              "use",
              "run"
            ],
            "userId": "'$CHE_USER_ID'",
            "domainId": "workspace",
            "instanceId": "'$CHE_WORKSPACE_ID'"
          }' "${CHE_API}/permissions" && \
          echo "âœ… Successfully shared workspace with user $OTHER_CRW_USER"
        component: dotnet
  - name: Launch .net web application in debug mode
    actions:
      - referenceContent: |
          {
            "version": "0.2.0",
              "configurations": [
                 {
                    "type": "netcoredbg",
                    "request": "launch",
                    "program": "/projects/dotnet-app/PoliticalFinanceReturn/PFR.Web.UI/bin/Debug/netcoreapp3.1/PFR.Web.UI.dll",
                    "args": [],
                    "name": ".NET Core Launch (console)",
                    "stopAtEntry": true,
                    "preLaunchTask": "Build",
                    "console": "internalConsole"
                  }
              ]
          }
        type: vscode-launch
